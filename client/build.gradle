import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'androidx.navigation.safeargs'

Properties props = new Properties()
props.load(new FileInputStream(file('signing.properties')))

dependencies {
  implementation fileTree(include: '*.jar', dir: 'libs')
  implementation fileTree(include: '*.aar', dir: 'libs')
  implementation 'com.google.android.gms:play-services-base:17.5.0'
  implementation 'com.google.android.gms:play-services-auth:19.0.0'
  implementation 'com.google.android.gms:play-services-safetynet:17.0.0'
  implementation platform('com.google.firebase:firebase-bom:26.1.0')
  implementation 'com.google.firebase:firebase-analytics'
  implementation "com.google.firebase:firebase-messaging:21.0.0"
  implementation 'com.google.guava:guava:24.1-android'
  implementation 'com.google.code.gson:gson:2.8.6'
  implementation 'joda-time:joda-time:2.9.9'
  implementation 'com.google.protobuf:protobuf-java:3.12.2'
  implementation 'com.google.code.findbugs:jsr305:3.0.2'
  implementation 'com.android.support:multidex:1.0.3'
  implementation 'androidx.legacy:legacy-support-v4:1.0.0'
  implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
  implementation "androidx.navigation:navigation-fragment:2.3.2"
  implementation "androidx.navigation:navigation-ui:2.3.2"
  implementation 'androidx.preference:preference:1.1.1'
  implementation 'androidx.appcompat:appcompat:1.2.0'
  implementation 'com.google.android.material:material:1.3.0-alpha04'
  implementation 'com.squareup.okhttp3:okhttp:4.6.0'
  implementation 'com.squareup.okhttp3:logging-interceptor:4.6.0'
  implementation project(':common')
  implementation project(':control-field')
  implementation project(':planet-render')
}

android {
  compileSdkVersion 30
  buildToolsVersion '30.0.2'

  // TODO: remove the dependency on this.
  useLibrary 'org.apache.http.legacy'

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    multiDexEnabled true
    minSdkVersion 21
    targetSdkVersion 30
    vectorDrawables.useSupportLibrary = true
  }

  packagingOptions {
    // Don't include NOTICE.txt or LICENSE.txt, many libraries define both and the duplicates
    // confuse the build process.
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/LICENSE.txt'
  }

  dexOptions {
    javaMaxHeapSize "2g"
  }

  signingConfigs {
    release {
      storeFile file(props['keystore'])
      storePassword props['password']
      keyAlias props['alias']
      keyPassword props['password']
    }
    debug {
      storeFile file('debug.keystore')
      storePassword 'warworlds'
      keyAlias 'Codeka'
      keyPassword 'warworlds'
    }
  }

  configurations {
    // This seems like a weird bug... something else includes listenablefuture from guava.
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
  }

  buildTypes {
    debug {
      debuggable true
      manifestPlaceholders = [applicationLabel: "@string/app_name_debug"]
      applicationIdSuffix ".debug"
      signingConfig signingConfigs.debug
    }
    release {
      manifestPlaceholders = [applicationLabel: "@string/app_name"]
      signingConfig signingConfigs.release
    }
  }
}

// This task copies the buildings.xml and ships.xml file from the server directory so that we don't
// need to maintain two identical files separately.
task('copyBuildingShipXml') {
  doLast {
    file('src/main/assets/buildings.xml').text = "<!-- THIS FILE IS AUTO-GENERATED! EDIT THE FILE IN server/data/designs -->\n\n" +
            file('../server/data/designs/buildings.xml').getText()
    file('src/main/assets/ships.xml').text = "<!-- THIS FILE IS AUTO-GENERATED! EDIT THE FILE IN server/data/designs -->\n\n" +
            file('../server/data/designs/ships.xml').getText()
  }
}

// This is a task which will increment the build # in AndroidManifest.xml
task('incrementVersionCode') {
  doLast {
    def manifestFile = file("src/main/AndroidManifest.xml")

    // First do the versionCode element, increment the new build #
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()

    def versionCode = Integer.parseInt(matcher.group(1)) + 1
    manifestText = matcher.replaceAll("versionCode=\"" + versionCode + "\"")

    // Now do versionName with the same build #.
    pattern = Pattern.compile("versionName=\"([0-9]+)\\.([0-9]+)\\.[0-9]+\"")
    matcher = pattern.matcher(manifestText)
    manifestText = matcher.replaceAll("versionName=\"\$1.\$2." + versionCode + "\"")

    manifestFile.write(manifestText)
  }
}

// This is a task which makes sure the warworlds.properties file is sanitized for release builds
task('resetReleaseWarworldsPropertiesFile') {
  doLast {
    def warworldsPropertiesFile = file("src/main/assets/warworlds.properties")
    def content = warworldsPropertiesFile.getText()

    // make sure on_behalf_of is commented out
    content = content.replaceAll("#?user.on_behalf_of\\s*=.*", "#user.on_behalf_of=nobody")

    // make sure debug is set to 'false'
    content = content.replaceAll("debug\\s*=.*", "debug=false")

    // change all of the in-app purchase fields to their defaults
    content = content.replaceAll("iap\\.([^=]+)=.*", "iap.\$1=\$1")

    // make sure the welcome.rss field is pointing to the live server
    content = content.replaceAll("welcome.rss=.*\$",
        "welcome.rss=http://www.war-worlds.com/forum/announcements/rss")

    warworldsPropertiesFile.write(content)
  }
}

// This is a task which makes sure the warworlds.properties file is sanitized for debug builds
task('resetDebugWarworldsPropertiesFile') {
  doLast {
    def warworldsPropertiesFile = file("src/main/assets/warworlds.properties")
    def content = warworldsPropertiesFile.getText()

    // make sure debug is set to 'true'
    content = content.replaceAll("debug\\s*=.*", "debug=true")

    warworldsPropertiesFile.write(content)
  }
}

tasks.whenTaskAdded { task ->
  if (task.name == 'generateReleaseBuildConfig') {
    task.dependsOn 'incrementVersionCode'
    task.dependsOn 'resetReleaseWarworldsPropertiesFile'
  } else if (task.name == 'generateDebugBuildConfig') {
    task.dependsOn 'resetDebugWarworldsPropertiesFile'
  }
}

preBuild.dependsOn 'copyBuildingShipXml'